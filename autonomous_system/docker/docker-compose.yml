# Docker Compose for Autonomous Task Solver System
# Complete production-ready deployment configuration

version: '3.8'

services:
  # Main autonomous system
  autonomous-system:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: autonomous-system
    restart: unless-stopped
    ports:
      - "8000:8000"  # Main API
      - "8080:8080"  # Monitoring dashboard
      - "9000:9000"  # WebSocket endpoint
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_PATH=/app/data/databases
      - CONFIG_PATH=/app/config
    volumes:
      - autonomous_data:/app/data
      - autonomous_logs:/app/logs
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
    depends_on:
      - redis
      - postgres
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD", "/app/scripts/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development version
  autonomous-system-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: autonomous-system-dev
    restart: unless-stopped
    ports:
      - "8001:8000"  # Dev API
      - "8081:8080"  # Dev monitoring
      - "9001:9000"  # Dev WebSocket
      - "8888:8888"  # Jupyter notebook
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATABASE_PATH=/app/data/databases
      - CONFIG_PATH=/app/config
    volumes:
      - autonomous_dev_data:/app/data
      - autonomous_logs:/app/logs
      - ../autonomous_system:/app/autonomous_system:ro
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
    depends_on:
      - redis
      - postgres-dev
    networks:
      - autonomous-network
    profiles:
      - dev

  # Testing version
  autonomous-system-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    container_name: autonomous-system-test
    restart: "no"
    environment:
      - ENVIRONMENT=testing
      - LOG_LEVEL=DEBUG
      - DATABASE_PATH=/app/data/databases
      - CONFIG_PATH=/app/config
    volumes:
      - autonomous_test_data:/app/data
      - ./config:/app/config:ro
    depends_on:
      - postgres-test
    networks:
      - autonomous-network
    profiles:
      - test

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: autonomous-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-autonomous123}
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: autonomous-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=autonomous_system
      - POSTGRES_USER=autonomous_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-autonomous123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autonomous_user -d autonomous_system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development PostgreSQL
  postgres-dev:
    image: postgres:15-alpine
    container_name: autonomous-postgres-dev
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=autonomous_system_dev
      - POSTGRES_USER=autonomous_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_DEV:-autonomous123}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - autonomous-network
    profiles:
      - dev

  # Test PostgreSQL
  postgres-test:
    image: postgres:15-alpine
    container_name: autonomous-postgres-test
    restart: "no"
    environment:
      - POSTGRES_DB=autonomous_system_test
      - POSTGRES_USER=autonomous_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_TEST:-autonomous123}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - autonomous-network
    profiles:
      - test

  # Vector database (ChromaDB)
  chromadb:
    image: chromadb/chroma:latest
    container_name: autonomous-chromadb
    restart: unless-stopped
    ports:
      - "8002:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: autonomous-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - autonomous-network
    profiles:
      - monitoring

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: autonomous-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - autonomous-network
    profiles:
      - monitoring

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: autonomous-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - autonomous-system
    networks:
      - autonomous-network
    profiles:
      - production

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: autonomous-celery-worker
    restart: unless-stopped
    command: celery -A autonomous_system.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_PATH=/app/data/databases
      - CONFIG_PATH=/app/config
    volumes:
      - autonomous_data:/app/data
      - autonomous_logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
    networks:
      - autonomous-network
    profiles:
      - production

  # Celery beat scheduler
  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: autonomous-celery-beat
    restart: unless-stopped
    command: celery -A autonomous_system.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_PATH=/app/data/databases
      - CONFIG_PATH=/app/config
    volumes:
      - autonomous_data:/app/data
      - autonomous_logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
    networks:
      - autonomous-network
    profiles:
      - production

  # Flower for Celery monitoring
  flower:
    image: mher/flower:latest
    container_name: autonomous-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - FLOWER_BROKER_API=redis://:autonomous123@redis:6379/0
      - FLOWER_BASIC_AUTH=admin:admin123
    depends_on:
      - redis
    networks:
      - autonomous-network
    profiles:
      - production

volumes:
  autonomous_data:
    driver: local
  autonomous_dev_data:
    driver: local
  autonomous_test_data:
    driver: local
  autonomous_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  postgres_dev_data:
    driver: local
  postgres_test_data:
    driver: local
  chromadb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  autonomous-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment variables (create .env file)
# REDIS_PASSWORD=your_redis_password
# POSTGRES_PASSWORD=your_postgres_password
# POSTGRES_PASSWORD_DEV=your_dev_password
# POSTGRES_PASSWORD_TEST=your_test_password
# GRAFANA_PASSWORD=your_grafana_password
