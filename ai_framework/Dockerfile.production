# Production Dockerfile for AI Framework
# Multi-stage build for security and optimization

# Stage 1: Build stage
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Production stage
FROM python:3.11-slim

# Create non-root user for security
RUN groupadd -r ai_framework && useradd -r -g ai_framework ai_framework

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /root/.local /home/ai_framework/.local

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /var/log/ai_framework /var/cache/ai_framework /tmp/ai_framework

# Set ownership
RUN chown -R ai_framework:ai_framework /app /var/log/ai_framework /var/cache/ai_framework /tmp/ai_framework

# Switch to non-root user
USER ai_framework

# Set environment variables
ENV PATH=/home/ai_framework/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Expose ports
EXPOSE 8000 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["python", "-m", "uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
