name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for exposed secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  lint-and-test:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt
          cd my-project && npm ci
      
      - name: Lint JavaScript
        run: |
          cd my-project && npm run lint
      
      - name: Check Python syntax
        run: |
          python -m py_compile gpt2_test.py mini_chat.py
      
      - name: Run tests
        run: |
          cd my-project && npm test

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Test Docker Compose build
        run: |
          cp .env.template .env
          docker-compose config
          docker-compose build --no-cache
      
      - name: Test container startup
        run: |
          docker-compose up -d
          sleep 30
          
          # Check if containers are running
          docker-compose ps
          
          # Basic health check
          curl -f http://localhost:5678 || exit 1
          
          # Cleanup
          docker-compose down -v

  backup-test:
    name: Backup Strategy Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Test backup script
        run: |
          chmod +x backup.sh
          # Create mock data directory
          mkdir -p /tmp/mock-n8n-data
          echo "test data" > /tmp/mock-n8n-data/test.txt
          
          # Test backup script (dry run)
          sed 's|/home/node/.n8n|/tmp/mock-n8n-data|g' backup.sh > backup-test.sh
          chmod +x backup-test.sh
          ./backup-test.sh || echo "Backup test completed with warnings"

  performance-test:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Analyze bundle size
        run: |
          cd my-project
          npm run build 2>/dev/null || echo "No build script found"
          
          # Check for large dependencies
          npm ls --depth=0 --json | jq '.dependencies | to_entries[] | select(.value.resolved != null) | .key' || true
      
      - name: Check Docker image size
        run: |
          docker build -t test-image . 2>/dev/null || echo "No Dockerfile found"
          docker images test-image 2>/dev/null || echo "Image size check skipped"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test, docker-build, backup-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment commands here
          echo "Production deployment completed"
      
      - name: Run post-deployment health checks
        run: |
          echo "üè• Running health checks..."
          # Add health check commands here
          echo "Health checks passed"

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify team
        run: |
          echo "üì¢ Sending deployment notifications..."
          # Add notification logic (Slack, email, etc.)
          echo "Notifications sent"