# CI/CD Pipeline for Autonomous Task Solver System
# Production-ready automated testing and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: autonomous-system

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r autonomous_system/ -f json -o bandit-report.json

      - name: Run Safety vulnerability check
        run: |
          pip install safety
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r autonomous_system/requirements.txt
          pip install black isort flake8 mypy

      - name: Run Black code formatter
        run: |
          black --check --diff autonomous_system/

      - name: Run isort import sorter
        run: |
          isort --check-only --diff autonomous_system/

      - name: Run Flake8 linter
        run: |
          flake8 autonomous_system/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Run MyPy type checker
        run: |
          mypy autonomous_system/ --ignore-missing-imports

  # Unit testing
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r autonomous_system/requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run unit tests
        run: |
          cd autonomous_system
          pytest tests/unit/ -v --cov=autonomous_system --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: autonomous_system/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r autonomous_system/requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Run integration tests
        run: |
          cd autonomous_system
          pytest tests/integration/ -v --cov=autonomous_system --cov-append

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: autonomous_system/test-results/

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r autonomous_system/requirements.txt
          pip install locust

      - name: Run performance tests
        run: |
          cd autonomous_system
          locust -f tests/performance/locustfile.py --headless --users 100 --spawn-rate 10 --run-time 60s

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: autonomous_system/locust-report.html

  # Security testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [performance-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        with:
          name: security-test-results
          path: zap-report.html

  # Build and test Docker image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test Docker image
        run: |
          cd autonomous_system
          docker build -f docker/Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker run --rm ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python -m pytest tests/unit/ -v

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          fi

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging-env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here
          # This could be deploying to a staging Kubernetes cluster
          # or running the deployment script with staging config

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test logic here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    environment:
      name: production-env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment logic here
          # This could be deploying to a production Kubernetes cluster
          # or running the deployment script with production config

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check logic here

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic here (Slack, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Production deployment failed!"
          # Add failure notification logic here

  # Documentation generation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r autonomous_system/requirements.txt
          pip install sphinx sphinx-rtd-theme myst-parser

      - name: Generate documentation
        run: |
          cd autonomous_system/docs
          make html

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: autonomous_system/docs/_build/html/

  # Final status check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [docs]
    steps:
      - name: Check all jobs completed
        run: |
          echo "All CI/CD pipeline jobs completed successfully!"
          echo "✅ Security scanning completed"
          echo "✅ Code quality checks passed"
          echo "✅ Unit tests passed"
          echo "✅ Integration tests passed"
          echo "✅ Performance tests completed"
          echo "✅ Security tests completed"
          echo "✅ Docker image built and tested"
          echo "✅ Documentation generated"
          echo ""
          echo "🚀 System is ready for deployment!"
