name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  API_BASE_URL: "http://127.0.0.1:8000"
  NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8000"
  ALLOWED_ORIGINS: "http://localhost:3000"

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run pytest
        env:
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN || 'ci-secret' }}
          ALLOWED_ORIGINS: ${{ env.ALLOWED_ORIGINS }}
        run: |
          PYTHONPATH=backend pytest -q backend/tests
  web-typecheck:
    runs-on: ubuntu-latest
    needs: backend-tests
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps
        working-directory: apps/web
        run: npm ci
      - name: TypeScript check
        working-directory: apps/web
        run: npx tsc -p tsconfig.json --noEmit

  e2e:
    runs-on: ubuntu-latest
    needs: [backend-tests, web-typecheck]
    timeout-minutes: 40
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Start API (background) and wait for health
        working-directory: backend
        env:
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN || 'ci-secret' }}
          DATABASE_URL: sqlite:///./dev-ci.db
          ALLOWED_ORIGINS: ${{ env.ALLOWED_ORIGINS }}
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > ../api.log 2>&1 &
          for i in {1..60}; do
            curl -sf ${{ env.API_BASE_URL }}/health && break || sleep 1;
          done

      - name: Install web deps and Playwright
        working-directory: apps/web
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: apps/web
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          NEXT_PUBLIC_API_BASE_URL: ${{ env.API_BASE_URL }}
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN || 'ci-secret' }}
        run: |
          npx playwright test --reporter=line --grep "Life button"

      - name: Upload Playwright test results (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: apps/web/test-results
      - name: Upload Playwright traces (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: apps/web/test-results/**/*.zip

  contract-test:
    runs-on: ubuntu-latest
    needs: backend-tests
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install backend deps + schemathesis
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt schemathesis
      - name: Start API (background) and wait for health
        working-directory: backend
        env:
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN || 'ci-secret' }}
          DATABASE_URL: sqlite:///./dev-ci.db
          ALLOWED_ORIGINS: ${{ env.ALLOWED_ORIGINS }}
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > ../api.log 2>&1 &
          for i in {1..60}; do
            curl -sf ${{ env.API_BASE_URL }}/health && break || sleep 1;
          done
      - name: Run Schemathesis on public endpoints
        run: |
          schemathesis run ${{ env.API_BASE_URL }}/openapi.json \
            --base-url=${{ env.API_BASE_URL }} \
            --endpoint=/health \
            --endpoint=/metrics \
            --checks=all

  k6-smoke:
    runs-on: ubuntu-latest
    needs: backend-tests
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up k6
        uses: grafana/setup-k6@v1
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Start API (background) and wait for health
        working-directory: backend
        env:
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN || 'ci-secret' }}
          DATABASE_URL: sqlite:///./dev-ci.db
          ALLOWED_ORIGINS: ${{ env.ALLOWED_ORIGINS }}
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > ../api.log 2>&1 &
          for i in {1..60}; do
            curl -sf ${{ env.API_BASE_URL }}/health && break || sleep 1;
          done
      - name: Run k6 smoke for life
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
        run: |
          k6 run tools/k6/life_smoke.js
  spelling-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install codespell
        run: pip install codespell
      - name: Run codespell (src + docs)
        run: |
          codespell -q 3 -S ".git,.venv,apps/web/node_modules,apps/web/.next,backups,toolkits,projects,src/ai_toolbox_20gb" \
            backend/app apps/web/src docs

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: table
          severity: CRITICAL,HIGH
