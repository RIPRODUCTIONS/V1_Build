name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Run backend tests
        env:
          CI_ENV: "true"
        run: |
          cd backend
          pytest -q

      - name: Start API for E2E
        env:
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: secret-ci
          DATABASE_URL: sqlite:///./dev-ci.db
          ALLOWED_ORIGINS: http://localhost:3000
        run: |
          cd backend
          nohup python -m uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          for i in {1..30}; do
            curl -sf http://127.0.0.1:8000/health && break || sleep 1;
          done

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install web dependencies
        run: |
          cd apps/web
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright tests
        env:
          API_BASE_URL: http://127.0.0.1:8000
          NEXT_PUBLIC_API_BASE_URL: http://127.0.0.1:8000
          CI_CLEANUP_TOKEN: secret-ci
        run: |
          cd apps/web
          npx playwright test --reporter=line

name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      minio:
        image: minio/minio:RELEASE.2024-06-13T22-53-53Z
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 5s --health-timeout 2s --health-retries 20
        command: server /data --console-address ":9001"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Backend tests
        working-directory: backend
        env:
          CI_ENV: 'true'
        run: pytest -q

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Web deps
        working-directory: apps/web
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Start API
        working-directory: backend
        env:
          CI_ENV: 'true'
          CI_CLEANUP_TOKEN: test-secret
          REDIS_URL: redis://localhost:6379/0
          S3_ENDPOINT_URL: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET: artifacts
        run: nohup python -m uvicorn app.main:app --host 127.0.0.1 --port 8000 &

      - name: Start Celery worker (optional)
        working-directory: backend
        env:
          REDIS_URL: redis://localhost:6379/0
          S3_ENDPOINT_URL: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET: artifacts
        run: nohup celery -A app.agent.tasks.celery_app worker --loglevel=INFO &

      - name: E2E tests
        working-directory: apps/web
        env:
          API_BASE_URL: http://127.0.0.1:8000
          WEB_BASE_URL: http://127.0.0.1:3000
          CI_CLEANUP_TOKEN: test-secret
        run: npm run test -s

name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  API_BASE_URL: "http://127.0.0.1:8000"
  NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8000"
  ALLOWED_ORIGINS: "http://localhost:3000"

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt', 'backend/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install backend deps
        working-directory: backend
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip
          pip install -r requirements.txt
      - name: Pytest
        working-directory: backend
        env:
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN }}
          ALLOWED_ORIGINS: ${{ env.ALLOWED_ORIGINS }}
        run: |
          . .venv/bin/activate
          python -m pytest -q

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install web deps
        working-directory: apps/web
        run: npm ci
      - name: Build
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ env.NEXT_PUBLIC_API_BASE_URL }}
        run: npm run build

  e2e:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Start API (background)
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN }}
          ALLOWED_ORIGINS: ${{ env.ALLOWED_ORIGINS }}
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -e .; fi
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > api.log 2>&1 &
          sleep 3
          curl -sSf ${{ env.API_BASE_URL }}/docs > /dev/null
      - name: Install web deps
        working-directory: apps/web
        run: npm ci
      - name: Install Playwright browsers
        working-directory: apps/web
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        working-directory: apps/web
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          NEXT_PUBLIC_API_BASE_URL: ${{ env.API_BASE_URL }}
          CI_ENV: "true"
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN }}
        run: npm test
      - name: Global Teardown (cleanup)
        if: always()
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          CI_CLEANUP_TOKEN: ${{ secrets.CI_CLEANUP_TOKEN }}
        run: |
          bash scripts/ci_cleanup.sh || true

name: CI
on:
  push:
  pull_request:
jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r backend/requirements.txt
          pip install pytest
      - name: Run tests
        run: |
          . .venv/bin/activate
          PYTHONPATH=backend pytest -q backend/tests
