from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path

from .config import Settings


@dataclass(frozen=True)
class ScaffoldOptions:
    project_name: str
    force: bool = False


def _write_file(path: Path, content: str, *, overwrite: bool) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    if path.exists() and not overwrite:
        return
    path.write_text(content)


def _fastapi_requirements() -> str:
    return (
        """
fastapi
uvicorn[standard]
python-dotenv
pydantic
    """.strip()
        + "\n"
    )


def _fastapi_app_py() -> str:
    return (
        """
from __future__ import annotations

from fastapi import FastAPI

app = FastAPI(title="API")


@app.get("/health")
async def health() -> dict[str, str]:
    return {"status": "ok"}
    """.strip()
        + "\n"
    )


def _project_readme(name: str) -> str:
    return (
        f"""
# {name}

Generated by builder scaffold. Contains a minimal FastAPI API and placeholders for future apps.

## Develop

```bash
python3 -m venv .venv
.venv/bin/pip install --upgrade pip
.venv/bin/pip install -r apps/api/requirements.txt
.venv/bin/uvicorn main:app --reload --app-dir apps/api
```

Open http://127.0.0.1:8000/health
""".strip()
        + "\n"
    )


def _env_sample(settings: Settings) -> str:
    return f"""
# Resource paths
AI_PROJECT_RESOURCE_DRIVE={settings.resource_drive}
AI_TOOLBOX_20GB_PATH={settings.toolbox_20gb}
AI_TOOLBOX_PATH={settings.toolbox}
AI_TOOLBOX_BACKENDR_2_PATH={settings.toolbox_backendr_2}
""".lstrip()


def scaffold_project(base_dir: Path, options: ScaffoldOptions) -> Path:
    """Create a new project skeleton under `projects/<name>` and return its path."""
    project_dir = base_dir / "projects" / options.project_name
    api_dir = project_dir / "apps" / "api"

    settings = Settings.load()

    # Write files
    _write_file(
        project_dir / "README.md", _project_readme(options.project_name), overwrite=options.force
    )
    _write_file(project_dir / ".env.sample", _env_sample(settings), overwrite=options.force)

    _write_file(api_dir / "requirements.txt", _fastapi_requirements(), overwrite=options.force)
    _write_file(api_dir / "main.py", _fastapi_app_py(), overwrite=options.force)

    # Project-level gitignore
    _write_file(
        project_dir / ".gitignore",
        """
.venv/
__pycache__/
*.pyc
.DS_Store
        """.strip()
        + "\n",
        overwrite=options.force,
    )

    return project_dir
