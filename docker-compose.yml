version: "3.9"
services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"

  api:
    build:
      context: ./backend
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SECURE_MODE=${SECURE_MODE:-true}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5

  web:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./apps/web:/app
    command: sh -c "npm ci && NEXT_PUBLIC_API_BASE_URL=http://localhost:8000 NEXT_PUBLIC_INTERNAL_API_KEY=${INTERNAL_API_KEY} npm run build && npm run start"
    environment:
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped
services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-builder}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  api:
    build:
      context: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-builder}
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
      SENTRY_DSN: ${SENTRY_DSN:-}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      CI_ENV: ${CI_ENV:-false}
      CI_CLEANUP_TOKEN: ${CI_CLEANUP_TOKEN:-}
      REDIS_URL: redis://redis:6379/0
      INTEGRATION_VAULT_KEY: ${INTEGRATION_VAULT_KEY:-changeme}
      GOOGLE_CALENDAR_SYNC: ${GOOGLE_CALENDAR_SYNC:-false}
      AUTOMATION_ENGINE_ENABLED: ${AUTOMATION_ENGINE_ENABLED:-true}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-your-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-your-google-client-secret}
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8000/api/health/live"]
      interval: 10s
      timeout: 3s
      retries: 5
  worker:
    build:
      context: ./backend
    command: celery -A app.agent.celery_app worker --loglevel=INFO
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-builder}
      REDIS_URL: redis://redis:6379/0
      S3_ENDPOINT_URL: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: artifacts
    depends_on:
      - db
      - redis
      - minio
  beat:
    build:
      context: ./backend
    command: celery -A app.agent.celery_app beat --loglevel=INFO
    environment:
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - redis
  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
  automation-worker:
    build:
      context: ./backend
    command: celery -A app.agent.celery_app worker --loglevel=INFO -Q automations,default
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-builder}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - db
      - redis
  automation-beat:
    build:
      context: ./backend
    command: celery -A app.agent.celery_app beat --loglevel=INFO
    environment:
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - redis
volumes:
  db_data:
  redis_data:
  minio_data:
