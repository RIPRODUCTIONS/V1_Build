from __future__ import annotations

from io import BytesIO
from typing import Any, Dict, List
from datetime import datetime

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch


def build_malware_report(summary: Dict[str, Any]) -> bytes:
    buf = BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=36)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("Malware Dynamic Analysis Report", styles["Title"]))
    story.append(Paragraph(datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC"), styles["Normal"]))
    story.append(Spacer(1, 0.25 * inch))

    story.append(Paragraph("Summary", styles["Heading2"]))
    s = summary or {}
    score = (s.get("score") or s.get("summary", {}).get("score") or "-")
    sev = (s.get("severity") or s.get("summary", {}).get("severity") or "-")
    story.append(Paragraph(f"Score: {score}", styles["Normal"]))
    story.append(Paragraph(f"Severity: {sev}", styles["Normal"]))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph("Indicators of Compromise (IOCs)", styles["Heading2"]))
    iocs: Dict[str, List[str]] = s.get("iocs", {})
    rows: List[List[str]] = [["Type", "Value"]]
    for k in ("domains", "ips", "mutexes", "registry_keys"):
        for v in iocs.get(k, [])[:20]:
            rows.append([k, str(v)])
    story.append(Table(rows, colWidths=[2.0 * inch, 4.0 * inch]))

    doc.build(story)
    return buf.getvalue()


